#!/usr/bin/python3
# -*- coding: utf-8 -*-


import initialization
from newopen import Open
import os , sys , time , ast , argparse
from mainwindow import MainWindow
from PyQt5.QtWidgets import QApplication  
from PyQt5.QtGui import QFont   
from palettes import DarkRedPallete , DarkBluePallete , ArcDarkRedPallete , ArcDarkBluePallete , LightRedPallete , LightBluePallete
from bubble import notifySend

# initialization
home_address = os.path.expanduser("~")

# ~/.config/persepolis_download_manager/ is download manager config folder
config_folder = str(home_address) + "/.config/persepolis_download_manager"

#user's preferences will saved in setting file
setting_file = config_folder + '/setting'

f = Open(setting_file)
setting_file_lines = f.readlines()
f.close()
setting_dict_str = str(setting_file_lines[0].strip())
setting_dict = ast.literal_eval(setting_dict_str) 

#getting user's desired font and style , ... from setting file
font = setting_dict['font']
font_size = int(setting_dict['font-size'])
style = setting_dict['style']
color_scheme = setting_dict['color-scheme']


#creating  terminal arguments  

parser = argparse.ArgumentParser(description='Persepolis Download Manager')
parser.add_argument('--link',action='store',nargs = 1 , help='download link' )
parser.add_argument('--referer',action='store',nargs = 1 , help='referer URL' )
parser.add_argument('--cookie',action='store',nargs = 1 , help='Cookie' )
parser.add_argument('--agent',action='store',nargs = 1 , help='User Agent' )
parser.add_argument('--headers',action='store',nargs = 1 , help='Extra request headers' )
parser.add_argument('--name',action='store',nargs = 1 , help='Requested file name' )
parser.add_argument('--execute',action='store',nargs=1, help='execute or not!' )
parser.add_argument('--default',action='store_true',help='restore default setting' )
parser.add_argument('--clear',action='store_true',help='clear download list' )
parser.add_argument('--tray',action='store_true',help='Persepolis is starting in tray icon' )
parser.add_argument('--version', action='version', version='Persepolis Download Manager 2.2.1 Unstable')
args = parser.parse_args()

#Mozilla firefox flashgot will send download information whith terminal arguments(link , referer , cookie , agent , headers , name )

#if --execute >> yes  >>> persepolis main window  will starts 
#if --execute >> no >>> persepolis started before!


add_link_dictionary = {}

if args.clear:
    status = os.system('rm -rf "' + str(config_folder) + '"' )
    if status == 0 :
        print ('Download list cleard!')
    else:
        print("persepolis can't clear download list")

    sys.exit(0)

if args.default :
    status = os.system('rm  "' + str(setting_file) + '"' )
    if status == 0 :
        print ('Persepolis restored default')
    else :
        print("Persepolis couldn't restore default")
    sys.exit(0)

if args.tray :
    start_in_tray = 'yes'
else:
    start_in_tray = 'no'

if args.link :
    add_link_dictionary ['link'] = "".join(args.link)

if args.referer :
    add_link_dictionary['referer'] = "".join(args.referer)

if args.cookie :
    add_link_dictionary['load-cookies'] = "".join(args.cookie)

if args.agent :
    add_link_dictionary['user-agent'] = "".join(args.agent)

if args.headers :
    add_link_dictionary['header'] = "".join(args.headers)

if args.name :
    add_link_dictionary ['out'] = "".join(args.name)
#when flashgot calls persepolis  then persepolis is creating a request file in /tmp folder . this file contains download informations
#persepolis mainwindow checks /tmp for flashgot request file every 2 seconds ( see CheckFlashgot class in mainwindow.py )
#when requset received by CheckFlashgot, a popup window (AddLinkWindow) is coming up and window is getting additional download informations from user (port , proxy , ...) and download starts and request file deleted
if ('link' in add_link_dictionary):   
#this section is checking validation of flashgot request file in /tmp . if request file is existed , it means that download manager didn't consider past requset, or consideration is still continuing
#so this loop is waiting 0.5 seconds and trying again
    while os.path.isfile("/tmp/persepolis-flashgot") == True :
        time.sleep(0.5)
    f = open("/tmp/persepolis-flashgot","w")
    f.writelines(str(add_link_dictionary))
    f.close()

if "".join(args.execute) == "yes": 
#setting color_scheme and style
#see palettes.py and setting.py
    if __name__ == "__main__":
        persepolis_download_manager = QApplication(sys.argv)
        persepolis_download_manager.setFont(QFont(font , font_size ))
        persepolis_download_manager.setStyle(style)

        if color_scheme == 'Persepolis Dark Red':
            persepolis_dark_red = DarkRedPallete()
            persepolis_download_manager.setPalette(persepolis_dark_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis Dark Blue':
            persepolis_dark_blue = DarkBluePallete()
            persepolis_download_manager.setPalette(persepolis_dark_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis ArcDark Red':
            persepolis_arcdark_red = ArcDarkRedPallete()
            persepolis_download_manager.setPalette(persepolis_arcdark_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #bf474d ; color : white} QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")

        elif color_scheme == 'Persepolis ArcDark Blue':
            persepolis_arcdark_blue = ArcDarkBluePallete()
            persepolis_download_manager.setPalette(persepolis_arcdark_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #5294e2 ; color : white } QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")
        elif color_scheme == 'Persepolis Light Red':
            persepolis_light_red = LightRedPallete()
            persepolis_download_manager.setPalette(persepolis_light_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")

        elif color_scheme == 'Persepolis Light Blue':
            persepolis_light_blue = LightBluePallete()
            persepolis_download_manager.setPalette(persepolis_light_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")

        mainwindow = MainWindow( start_in_tray )
        if start_in_tray == 'yes':
            mainwindow.hide()
        else:
            mainwindow.show()
        sys.exit(persepolis_download_manager.exec_())
    else:
         sys.exit(0)
else:
# (--execute no) and no link finded in --link
#this section warns user that program is still running and no need to run it again
#and creating a file to notify mainwindow for showing
    if not('link' in add_link_dictionary):
        f = open("/tmp/persepolis/show-window" , 'w')
        f.close()
    sys.exit(0)


