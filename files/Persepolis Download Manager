#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#This script is running persepolis for mac
from newopen import Open
import os , sys , time , ast , argparse
if not (os.path.isfile('/tmp/persepolis_exec.lock')): 
    import initialization
    from mainwindow import MainWindow
from PyQt5.QtWidgets import QApplication  
from PyQt5.QtGui import QFont   
from palettes import DarkRedPallete , DarkBluePallete , ArcDarkRedPallete , ArcDarkBluePallete , LightRedPallete , LightBluePallete
from bubble import notifySend
import osCommands
from error_window import ErrorWindow
import traceback
# initialization
home_address = os.path.expanduser("~")

# ~/.config/persepolis_download_manager/ is download manager config folder
config_folder = str(home_address) + "/.config/persepolis_download_manager"

#user's preferences will saved in setting file
setting_file = config_folder + '/setting'

f = Open(setting_file)
setting_file_lines = f.readlines()
f.close()
setting_dict_str = str(setting_file_lines[0].strip())
setting_dict = ast.literal_eval(setting_dict_str) 

#getting user's desired font and style , ... from setting file
font = setting_dict['font']
font_size = int(setting_dict['font-size'])
style = setting_dict['style']
color_scheme = setting_dict['color-scheme']


#creating  terminal arguments  

parser = argparse.ArgumentParser(description='Persepolis Download Manager')
parser.add_argument('--link',action='store',nargs = 1 , help='Download link.(Use "" for links)' )
parser.add_argument('--referer',action='store',nargs = 1 , help='Set an http referrer (Referer). This affects all http/https downloads.  If * is given, the download URI is also used as the referrer.' )
parser.add_argument('--cookie',action='store',nargs = 1 , help='Cookie' )
parser.add_argument('--agent',action='store',nargs = 1 , help='Set user agent for HTTP(S) downloads.  Default: aria2/$VERSION, $VERSION is replaced by package version.' )
parser.add_argument('--headers',action='store',nargs = 1 , help='Append HEADER to HTTP request header. ' )
parser.add_argument('--name',action='store',nargs = 1 , help='The  file  name  of  the downloaded file. ' )
parser.add_argument('--default',action='store_true',help='restore default setting' )
parser.add_argument('--clear',action='store_true',help='Clear download list and user setting!' )
parser.add_argument('--tray',action='store_true',help="Persepolis is starting in tray icon. It's useful when you want to put persepolis in system's startup." )
parser.add_argument('--version', action='version', version='Persepolis Download Manager 2.2.2 Unstable')
args = parser.parse_args()

#Mozilla firefox flashgot will send download information whith terminal arguments(link , referer , cookie , agent , headers , name )

#if --execute >> yes  >>> persepolis main window  will starts 
#if --execute >> no >>> persepolis started before!


add_link_dictionary = {}

if args.clear:
    status = osCommands.removeDir(str(config_folder))
    if status == 'ok' or status == 'no' :
        print ('Download list cleard!')
    else:
        print("persepolis can't clear download list")

    sys.exit(0)

if args.default :
    status = osCommands.remove(str(setting_file))
    if status == 'ok' or status == 'no':
        print ('Persepolis restored default')
    else :
        print("Persepolis couldn't restore default")
    sys.exit(0)

if args.tray :
    start_in_tray = 'yes'
else:
    start_in_tray = 'no'

if args.link :
    add_link_dictionary ['link'] = "".join(args.link)

if args.referer :
    add_link_dictionary['referer'] = "".join(args.referer)

if args.cookie :
    add_link_dictionary['load-cookies'] = "".join(args.cookie)

if args.agent :
    add_link_dictionary['user-agent'] = "".join(args.agent)

if args.headers :
    add_link_dictionary['header'] = "".join(args.headers)

if args.name :
    add_link_dictionary ['out'] = "".join(args.name)
#when flashgot calls persepolis  then persepolis is creating a request file in /tmp folder . this file contains download informations
#persepolis mainwindow checks /tmp for flashgot request file every 2 seconds ( see CheckFlashgot class in mainwindow.py )
#when requset received by CheckFlashgot, a popup window (AddLinkWindow) is coming up and window is getting additional download informations from user (port , proxy , ...) and download starts and request file deleted
if ('link' in add_link_dictionary):   
#this section is checking validation of flashgot request file in /tmp . if request file is existed , it means that download manager didn't consider past requset, or consideration is still continuing
#so this loop is waiting 0.5 seconds and trying again
    while os.path.isfile("/tmp/persepolis-flashgot") == True :
        time.sleep(0.5)
    f = open("/tmp/persepolis-flashgot","w")
    f.writelines(str(add_link_dictionary))
    f.close()

if not (os.path.isfile('/tmp/persepolis_exec.lock')): #if persepolis_exec is existed , it means persepolis is still running! 
    osCommands.touch('/tmp/persepolis_exec.lock') #create persepolis_exec.lock in /tmp
#setting color_scheme and style
#see palettes.py and setting.py
    if __name__ == "__main__":
        persepolis_download_manager = QApplication(sys.argv)
        persepolis_download_manager.setFont(QFont(font , font_size ))
        persepolis_download_manager.setStyle(style)

        if color_scheme == 'Persepolis Dark Red':
            persepolis_dark_red = DarkRedPallete()
            persepolis_download_manager.setPalette(persepolis_dark_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis Dark Blue':
            persepolis_dark_blue = DarkBluePallete()
            persepolis_download_manager.setPalette(persepolis_dark_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")
        elif color_scheme == 'Persepolis ArcDark Red':
            persepolis_arcdark_red = ArcDarkRedPallete()
            persepolis_download_manager.setPalette(persepolis_arcdark_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #bf474d ; color : white} QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")

        elif color_scheme == 'Persepolis ArcDark Blue':
            persepolis_arcdark_blue = ArcDarkBluePallete()
            persepolis_download_manager.setPalette(persepolis_arcdark_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #5294e2 ; color : white } QToolTip { color: #ffffff; background-color: #353945; border: 1px solid white; } QPushButton {background-color: #353945  } QTabWidget {background-color : #353945;} QMenu {background-color: #353945 }")
        elif color_scheme == 'Persepolis Light Red':
            persepolis_light_red = LightRedPallete()
            persepolis_download_manager.setPalette(persepolis_light_red)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected {background-color : #d64937 ;color : white} QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")

        elif color_scheme == 'Persepolis Light Blue':
            persepolis_light_blue = LightBluePallete()
            persepolis_download_manager.setPalette(persepolis_light_blue)
            persepolis_download_manager.setStyleSheet("QMenu::item:selected { background-color : #2a82da ;color : white } QToolTip { color: #ffffff; background-color: #353535; border: 1px solid white; }")


        try:
            mainwindow = MainWindow( start_in_tray )
            if start_in_tray == 'yes':
                mainwindow.hide()
            else:
                mainwindow.show()

        except Exception :
            #Resetting persepolis
            status = osCommands.removeDir(str(config_folder))
            #removing persepolis lock form /tmp
            f = Open('/tmp/persepolis_exec.lock')
            f.close()
            f.remove()
            error_window = ErrorWindow(str(traceback.format_exc()))
            error_window.show()

        sys.exit(persepolis_download_manager.exec_())

    else:
         sys.exit(0)
else:
    print('lock file found in this path:')
    print('    /tmp/persepolis_exec.lock')
    print('you can remove it manually!')
#this section warns user that program is still running and no need to run it again
    if not('link' in add_link_dictionary):
        f = open("/tmp/persepolis/show-window" , 'w')
        f.close()
    sys.exit(0)


